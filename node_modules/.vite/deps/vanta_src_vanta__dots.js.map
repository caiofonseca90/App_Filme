{
  "version": 3,
  "sources": ["../../vanta/src/vanta.dots.js"],
  "sourcesContent": ["import VantaBase, {VANTA} from './_base.js'\r\nimport {rn, ri, sample, mobileCheck} from './helpers.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nclass Effect extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      color: 0xff8820,\r\n      color2: 0xff8820,\r\n      backgroundColor: 0x222222,\r\n      size: 3,\r\n      spacing: 35,\r\n      showLines: true,\r\n    };\r\n  }\r\n\r\n  onInit() {\r\n    var camera = this.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 0.1, 5000)\r\n    camera.position.x = 0\r\n    camera.position.y = 250\r\n    camera.position.z = 50\r\n    camera.tx = 0\r\n    camera.ty = 50\r\n    camera.tz = 350\r\n    camera.lookAt(0,0,0)\r\n    this.scene.add(camera)\r\n\r\n    var starsGeometry = this.starsGeometry = new THREE.BufferGeometry()\r\n    var i,j,k,l,star,starsMaterial,starField\r\n    var space = this.options.spacing\r\n    const points = []\r\n\r\n    for (i = k = -30; k <= 30; i = ++k) {\r\n      for (j = l = -30; l <= 30; j = ++l) {\r\n        star = new THREE.Vector3()\r\n        star.x = i * space + space/2\r\n        star.y = rn(0, 5) - 150\r\n        star.z = j * space + space/2\r\n        points.push(star)\r\n      }\r\n    }\r\n    starsGeometry.setFromPoints(points)\r\n\r\n\r\n    starsMaterial = new THREE.PointsMaterial({\r\n      color: this.options.color,\r\n      size: this.options.size\r\n    });\r\n    starField = this.starField = new THREE.Points(starsGeometry, starsMaterial)\r\n    this.scene.add(starField)\r\n\r\n    if (this.options.showLines) {\r\n      var material = new THREE.LineBasicMaterial( { color: this.options.color2 } );\r\n      var linesGeo = new THREE.BufferGeometry()\r\n      const points = []\r\n      for (i = 0; i < 200; i ++) {\r\n        var f1 = rn(40,60)\r\n        var f2 = f1 + rn(12,20)\r\n        // https://math.stackexchange.com/questions/1585975/how-to-generate-random-points-on-a-sphere\r\n        var z = rn(-1,1)\r\n        var r = Math.sqrt(1 - z*z)\r\n        var theta = rn(0, Math.PI * 2)\r\n        var y = Math.sin(theta) * r\r\n        var x = Math.cos(theta) * r\r\n        points.push(new THREE.Vector3( x*f1, y*f1, z*f1) )\r\n        points.push(new THREE.Vector3( x*f2, y*f2, z*f2) )\r\n      }\r\n      linesGeo.setFromPoints(points)\r\n      this.linesMesh = new THREE.LineSegments( linesGeo, material )\r\n      this.scene.add(this.linesMesh)\r\n    }\r\n\r\n    // this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n    // this.material = new THREE.MeshLambertMaterial({\r\n    //   color: this.options.color,\r\n    //   emissive: this.options.color,\r\n    //   emissiveIntensity: 0.75\r\n    // });\r\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\r\n    // this.scene.add(this.cube);\r\n\r\n    // const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\r\n    // c.position.z = 30;\r\n    // this.scene.add(c);\r\n\r\n    // const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\r\n    // this.scene.add(light);\r\n  }\r\n\r\n  onUpdate() {\r\n    const starsGeometry = this.starsGeometry\r\n    const starField = this.starField\r\n    for (var j = 0; j < starsGeometry.attributes.position.array.length; j+=3) {\r\n      const x = starsGeometry.attributes.position.array[j]\r\n      const y = starsGeometry.attributes.position.array[j+1]\r\n      const z = starsGeometry.attributes.position.array[j+2]\r\n      // var i = starsGeometry.vertices[j]\r\n      const newY = y + 0.1 * Math.sin(z*0.02 + x*0.015 + this.t*0.02)\r\n      starsGeometry.attributes.position.array[j+1] = newY\r\n    }\r\n\r\n    starsGeometry.attributes.position.setUsage(THREE.DynamicDrawUsage)\r\n    starsGeometry.computeVertexNormals()\r\n    starsGeometry.attributes.position.needsUpdate = true\r\n\r\n    const c = this.camera\r\n    const rate = 0.003\r\n    c.position.x += (c.tx - c.position.x) * rate\r\n    c.position.y += (c.ty - c.position.y) * rate\r\n    c.position.z += (c.tz - c.position.z) * rate\r\n    c.lookAt(0,0,0)\r\n\r\n    if (this.linesMesh) {\r\n      this.linesMesh.rotation.z += 0.002\r\n      this.linesMesh.rotation.x += 0.0008\r\n      this.linesMesh.rotation.y += 0.0005\r\n      // starField.rotation.y += (this.mouseX * 0.1 - starField.rotation.y) * 0.01\r\n    }\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    this.camera.tx = (x - 0.5) * 100 // -50 to 50\r\n    this.camera.ty = 50 + y * 50 // 50 to 100\r\n  }\r\n\r\n  onRestart() {\r\n    this.scene.remove( this.starField )\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('DOTS', Effect)\r\n"],
  "mappings": ";;;;;;;;AAGA,IAAM,MAAM,OAAO,UAAU;AAC7B,IAAI,QAAQ,OAAO,OAAO;AAE1B,IAAM,SAAN,cAAqB,aAAU;AAAA,EAC7B,OAAO,YAAY;AACjB,SAAK,UAAU,iBAAiB;AAAA,MAC9B,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,iBAAiB;AAAA,MACjB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EAEA,SAAS;AACP,QAAI,SAAS,KAAK,SAAS,IAAI,MAAM,kBAAkB,IAAI,KAAK,QAAQ,KAAK,QAAQ,KAAK,GAAI;AAC9F,WAAO,SAAS,IAAI;AACpB,WAAO,SAAS,IAAI;AACpB,WAAO,SAAS,IAAI;AACpB,WAAO,KAAK;AACZ,WAAO,KAAK;AACZ,WAAO,KAAK;AACZ,WAAO,OAAO,GAAE,GAAE,CAAC;AACnB,SAAK,MAAM,IAAI,MAAM;AAErB,QAAI,gBAAgB,KAAK,gBAAgB,IAAI,MAAM,eAAe;AAClE,QAAI,GAAE,GAAE,GAAE,GAAE,MAAK,eAAc;AAC/B,QAAI,QAAQ,KAAK,QAAQ;AACzB,UAAM,SAAS,CAAC;AAEhB,SAAK,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE,GAAG;AAClC,WAAK,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE,GAAG;AAClC,eAAO,IAAI,MAAM,QAAQ;AACzB,aAAK,IAAI,IAAI,QAAQ,QAAM;AAC3B,aAAK,IAAI,GAAG,GAAG,CAAC,IAAI;AACpB,aAAK,IAAI,IAAI,QAAQ,QAAM;AAC3B,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,IACF;AACA,kBAAc,cAAc,MAAM;AAGlC,oBAAgB,IAAI,MAAM,eAAe;AAAA,MACvC,OAAO,KAAK,QAAQ;AAAA,MACpB,MAAM,KAAK,QAAQ;AAAA,IACrB,CAAC;AACD,gBAAY,KAAK,YAAY,IAAI,MAAM,OAAO,eAAe,aAAa;AAC1E,SAAK,MAAM,IAAI,SAAS;AAExB,QAAI,KAAK,QAAQ,WAAW;AAC1B,UAAI,WAAW,IAAI,MAAM,kBAAmB,EAAE,OAAO,KAAK,QAAQ,OAAO,CAAE;AAC3E,UAAI,WAAW,IAAI,MAAM,eAAe;AACxC,YAAMA,UAAS,CAAC;AAChB,WAAK,IAAI,GAAG,IAAI,KAAK,KAAM;AACzB,YAAI,KAAK,GAAG,IAAG,EAAE;AACjB,YAAI,KAAK,KAAK,GAAG,IAAG,EAAE;AAEtB,YAAI,IAAI,GAAG,IAAG,CAAC;AACf,YAAI,IAAI,KAAK,KAAK,IAAI,IAAE,CAAC;AACzB,YAAI,QAAQ,GAAG,GAAG,KAAK,KAAK,CAAC;AAC7B,YAAI,IAAI,KAAK,IAAI,KAAK,IAAI;AAC1B,YAAI,IAAI,KAAK,IAAI,KAAK,IAAI;AAC1B,QAAAA,QAAO,KAAK,IAAI,MAAM,QAAS,IAAE,IAAI,IAAE,IAAI,IAAE,EAAE,CAAE;AACjD,QAAAA,QAAO,KAAK,IAAI,MAAM,QAAS,IAAE,IAAI,IAAE,IAAI,IAAE,EAAE,CAAE;AAAA,MACnD;AACA,eAAS,cAAcA,OAAM;AAC7B,WAAK,YAAY,IAAI,MAAM,aAAc,UAAU,QAAS;AAC5D,WAAK,MAAM,IAAI,KAAK,SAAS;AAAA,IAC/B;AAAA,EAiBF;AAAA,EAEA,WAAW;AACT,UAAM,gBAAgB,KAAK;AAC3B,UAAM,YAAY,KAAK;AACvB,aAAS,IAAI,GAAG,IAAI,cAAc,WAAW,SAAS,MAAM,QAAQ,KAAG,GAAG;AACxE,YAAM,IAAI,cAAc,WAAW,SAAS,MAAM,CAAC;AACnD,YAAM,IAAI,cAAc,WAAW,SAAS,MAAM,IAAE,CAAC;AACrD,YAAM,IAAI,cAAc,WAAW,SAAS,MAAM,IAAE,CAAC;AAErD,YAAM,OAAO,IAAI,MAAM,KAAK,IAAI,IAAE,OAAO,IAAE,QAAQ,KAAK,IAAE,IAAI;AAC9D,oBAAc,WAAW,SAAS,MAAM,IAAE,CAAC,IAAI;AAAA,IACjD;AAEA,kBAAc,WAAW,SAAS,SAAS,MAAM,gBAAgB;AACjE,kBAAc,qBAAqB;AACnC,kBAAc,WAAW,SAAS,cAAc;AAEhD,UAAM,IAAI,KAAK;AACf,UAAM,OAAO;AACb,MAAE,SAAS,MAAM,EAAE,KAAK,EAAE,SAAS,KAAK;AACxC,MAAE,SAAS,MAAM,EAAE,KAAK,EAAE,SAAS,KAAK;AACxC,MAAE,SAAS,MAAM,EAAE,KAAK,EAAE,SAAS,KAAK;AACxC,MAAE,OAAO,GAAE,GAAE,CAAC;AAEd,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU,SAAS,KAAK;AAC7B,WAAK,UAAU,SAAS,KAAK;AAC7B,WAAK,UAAU,SAAS,KAAK;AAAA,IAE/B;AAAA,EACF;AAAA,EAEA,YAAY,GAAE,GAAG;AACf,SAAK,OAAO,MAAM,IAAI,OAAO;AAC7B,SAAK,OAAO,KAAK,KAAK,IAAI;AAAA,EAC5B;AAAA,EAEA,YAAY;AACV,SAAK,MAAM,OAAQ,KAAK,SAAU;AAAA,EACpC;AACF;AACA,OAAO,UAAU;AACjB,IAAO,qBAAQ,MAAM,SAAS,QAAQ,MAAM;",
  "names": ["points"]
}
