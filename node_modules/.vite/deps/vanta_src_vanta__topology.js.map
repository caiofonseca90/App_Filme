{
  "version": 3,
  "sources": ["../../vanta/src/vanta.topology.js"],
  "sourcesContent": ["// Original effect by Kjetil Midtgarden Golid\r\n// https://github.com/kgolid/p5ycho/blob/master/topology/sketch.js\r\n\r\nimport P5Base, {VANTA} from './_p5Base.js'\r\nimport {color2Rgb} from './helpers.js'\r\n\r\nlet p5 = (typeof window == 'object') && window.p5\r\n\r\nclass Effect extends P5Base {\r\n  static initClass() {\r\n    this.prototype.p5 = true\r\n    this.prototype.defaultOptions = {\r\n      color: 0x89964e,\r\n      backgroundColor: 0x002222,\r\n    }\r\n  }\r\n  constructor(userOptions) {\r\n    p5 = userOptions.p5 || p5\r\n    super(userOptions)\r\n  }\r\n  onInit() {\r\n    const t = this\r\n\r\n    let sketch = function(p) {\r\n      let width = t.width\r\n      let height = t.height\r\n      let offset = 100\r\n\r\n      let flow_cell_size = 10\r\n\r\n      let noise_size = 0.003\r\n      let noise_radius = 0.1\r\n\r\n      let flow_width = (width + offset * 2) / flow_cell_size\r\n      let flow_height = (height + offset * 2) / flow_cell_size\r\n\r\n      let noise_grid = []\r\n      let flow_grid = []\r\n\r\n      let number_of_particles = 4500\r\n      let particles = []\r\n\r\n      let tick = 0\r\n      p.setup = function() {\r\n        t.initP5(p) // sets bg too\r\n        p.smooth()\r\n        p.noStroke()\r\n        //p.blendMode(p.OVERLAY)\r\n\r\n        init_particles()\r\n        init_flow()\r\n      }\r\n      p.draw = function() {\r\n        p.translate(-offset, -offset)\r\n        //display_flow()\r\n        update_particles()\r\n        display_particles()\r\n        tick += 0.002\r\n      }\r\n\r\n      function init_particles() {\r\n        for (let i = 0; i < number_of_particles; i++) {\r\n          let r = p.random(p.width + 2 * offset)\r\n          let q = p.random(p.height + 2 * offset)\r\n          particles.push({\r\n            prev: p.createVector(r, q),\r\n            pos: p.createVector(r, q),\r\n            vel: p.createVector(0, 0),\r\n            acc: p.createVector(0, 0),\r\n            col: p.random(255),\r\n            seed: i\r\n          })\r\n        }\r\n      }\r\n\r\n      function update_particles() {\r\n        for (let i = 0; i < number_of_particles; i++) {\r\n          let prt = particles[i]\r\n          let flow = get_flow(prt.pos.x, prt.pos.y)\r\n\r\n          prt.prev.x = prt.pos.x\r\n          prt.prev.y = prt.pos.y\r\n\r\n          prt.pos.x = mod(prt.pos.x + prt.vel.x, p.width + 2 * offset)\r\n          prt.pos.y = mod(prt.pos.y + prt.vel.y, p.height + 2 * offset)\r\n\r\n          prt.vel\r\n            .add(prt.acc)\r\n            .normalize()\r\n            .mult(2.2)\r\n\r\n          //prt.acc = p5.Vector.fromAngle(p.noise(prt.seed * 10, tick) * p.TAU).mult(0.01)\r\n          prt.acc = p.createVector(0, 0)\r\n          prt.acc.add(flow).mult(3)\r\n        }\r\n      }\r\n\r\n      function init_flow() {\r\n        for (let i = 0; i < flow_height; i++) {\r\n          let row = []\r\n          for (let j = 0; j < flow_width; j++) {\r\n            row.push(calculate_flow(j * noise_size, i * noise_size, noise_radius))\r\n          }\r\n          flow_grid.push(row)\r\n        }\r\n      }\r\n\r\n      function calculate_flow(x, y, r) {\r\n        //console.log(x,y)\r\n        let high_val = 0\r\n        let low_val = 1\r\n        let high_pos = p.createVector(0, 0)\r\n        let low_pos = p.createVector(0, 0)\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n          let angle = i / 100 * p.TAU\r\n          let pos = p.createVector(x + p.cos(angle) * r, y + p.sin(angle) * r)\r\n          let val = p.noise(pos.x, pos.y)\r\n\r\n          if (val > high_val) {\r\n            high_val = val\r\n            high_pos.x = pos.x\r\n            high_pos.y = pos.y\r\n          }\r\n          if (val < low_val) {\r\n            low_val = val\r\n            low_pos.x = pos.x\r\n            low_pos.y = pos.y\r\n          }\r\n        }\r\n\r\n        let flow_angle = p.createVector(low_pos.x - high_pos.x, low_pos.y - high_pos.y)\r\n        flow_angle.normalize().mult(high_val - low_val)\r\n\r\n        return flow_angle\r\n      }\r\n\r\n      function get_flow(xpos, ypos) {\r\n        xpos = p.constrain(xpos, 0, p.width + offset * 2)\r\n        ypos = p.constrain(ypos, 0, p.height + offset * 2)\r\n        return flow_grid[p.floor(ypos / flow_cell_size)][p.floor(xpos / flow_cell_size)]\r\n      }\r\n\r\n      function display_particles() {\r\n        p.strokeWeight(1)\r\n        // 255, 240, 220\r\n        p.stroke(color2Rgb(t.options.color, 0.05))\r\n        for (let i = 0; i < particles.length; i++) {\r\n          //p.stroke(particles[i].col)\r\n          //p.point(particles[i].pos.x, particles[i].pos.y)\r\n          if (p5.Vector.dist(particles[i].prev, particles[i].pos) < 10)\r\n            p.line(particles[i].prev.x, particles[i].prev.y, particles[i].pos.x, particles[i].pos.y)\r\n        }\r\n      }\r\n\r\n      function display_flow() {\r\n        for (let i = 0; i < flow_grid.length; i++) {\r\n          for (let j = 0; j < flow_grid[i].length; j++) {\r\n            p.strokeWeight(1)\r\n            p.stroke(255, 0, 0)\r\n            p.noFill()\r\n            p.ellipse(j * flow_cell_size, i * flow_cell_size, 7, 7)\r\n            p.line(\r\n              j * flow_cell_size,\r\n              i * flow_cell_size,\r\n              j * flow_cell_size + flow_grid[i][j].x * 50,\r\n              i * flow_cell_size + flow_grid[i][j].y * 50\r\n            )\r\n          }\r\n        }\r\n      }\r\n\r\n      // p.keyPressed = function() {\r\n      //   if (p.keyCode === 80) {\r\n      //     p.saveCanvas('landslide', 'jpeg')\r\n      //   }\r\n      // }\r\n\r\n      function mod(x, n) {\r\n        return (x % n + n) % n\r\n      }\r\n    }\r\n    new p5(sketch)\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('TOPOLOGY', Effect)"],
  "mappings": "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",
  "names": []
}
